
/*
 * @JLog.java@
 * Created on 24-Sep-2023
 *
 * Copyright (c) 2023 Imspaliwal.
 * All Rights Reserved.
 *
 * THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF Imspaliwal
 * The copyright notice above does not evidence any
 * actual or intended publication of such source code.
 *
 */
package com.qa.orangehrm.log;

import java.io.PrintWriter;
import java.io.StringWriter;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.testng.Assert;

import com.qa.orangehrm.screenshot.TakeScreenshot;
import com.qa.orangehrm.testng.TestListener;

/**
 * This class is used for tests method to log message that will be included in
 * the HTML reports generated by TestNG
 *
 * @author namit
 *
 */
public class JLog {

    private final static String normalFontBegin = "<font size='2' face='Arial, Helvetica, sans-serif', color='black'>";
    private final static String warningFontBegin = "<font size='2' face='Arial, Helvetica, sans-serif', color='yellow'>";
    private final static String errorFontBegin = "<font size='2' face='Arial, Helvetica, sans-serif', color='red'>";
    private final static String fontEnd = "</font>";

    private static boolean logForCucumber = false;
    // private static scenario scenarioForCucumber;

    private static boolean quiteMode = false;

    /**
     * Used to link the desired log type level in
     * {@link JLog#log(LOG_TYPE, String)} <br>
     *
     * Fail, Error, Warning, None
     *
     * @author namit
     *
     */
    public enum LOG_TYPE {
        Fail, Error, Warning, None;
    }

    /**
     * method to do logging in Tests methods and implementation code
     *
     * @param logType
     * @param message
     */
    public static void log(LOG_TYPE logType, String message) {
        switch (logType) {
        case Fail:
            JLog.fail(message);
            break;
        case Error:
            JLog.error(message);
            break;
        case Warning:
            JLog.warning(message);
            break;
        default:
            JLog.write(message);
        }
    }

    /**
     * method to do logging in Tests methods and implementation code
     *
     * @param logType
     * @param message
     * @param deviceType
     */
    public static void log(LOG_TYPE logType, String message, String deviceType) {
        switch (logType) {
        case Fail:
            JLog.fail(message);
            break;
        case Error:
            JLog.error(message);
            break;
        case Warning:
            JLog.warning(message);
            break;
        default:
            JLog.write(message);
        }
    }

    // Fail Methods

    public static void fail(String message) {
        fail(message, null, TakeScreenshot.True);
    }

    public static void fail(Throwable throwable) {
        fail(null, throwable, TakeScreenshot.True);
    }

    public static void fail(String message, TakeScreenshot takeScreenshot) {
        fail(message, null, takeScreenshot);
    }

    public static void fail(String message, Throwable throwable) {
        fail(message, throwable, TakeScreenshot.True);
    }

    public static void fail(String message, Throwable throwable, TakeScreenshot takeScreenshot) {

        handleWarningErrorFail(message, throwable, takeScreenshot, "FAIL");

        if (message != null) {
            // AssertJUnit.fail(sanitize(message));
            Assert.fail(sanitize(message));
        } else {
            // AssertJUnit.fail();
            Assert.fail();
        }
    }

    public static void fail(String message, Throwable throwable, TakeScreenshot takeScreenshot, String deviceType) {
        handleWarningErrorFail(message, throwable, takeScreenshot, "FAIL", deviceType);
    }

    // Error Methods

    public static void error(String message) {
        error(message, null, TakeScreenshot.True);
    }

    public static void error(Throwable throwable) {
        error(null, throwable, TakeScreenshot.True);
    }

    public static void error(String message, TakeScreenshot takeScreenshot) {
        error(message, null, takeScreenshot);
    }

    public static void error(String message, Throwable throwable) {
        error(message, throwable, TakeScreenshot.True);
    }

    public static void error(String message, Throwable throwable, TakeScreenshot takeScreenshot) {
        handleWarningErrorFail(message, throwable, takeScreenshot, "ERROR");
    }

    public static void error(String message, Throwable throwable, TakeScreenshot takeScreenshot, String deviceType) {
        handleWarningErrorFail(message, throwable, takeScreenshot, "ERROR", deviceType);
    }

    // Warning Methods

    public static void warning(String message) {
        warning(message, null, TakeScreenshot.True);
    }

    public static void warning(Throwable throwable) {
        warning(null, throwable, TakeScreenshot.True);
    }

    public static void warning(String message, TakeScreenshot takeScreenshot) {
        warning(message, null, takeScreenshot);
    }

    public static void warning(String message, Throwable throwable) {
        warning(message, throwable, TakeScreenshot.True);
    }

    public static void warning(String message, Throwable throwable, TakeScreenshot takeScreenshot) {
        handleWarningErrorFail(message, throwable, takeScreenshot, "WARNING");
    }

    public static void warning(String message, Throwable throwable, TakeScreenshot takeScreenshot, String deviceType) {
        handleWarningErrorFail(message, throwable, takeScreenshot, "WARNING", deviceType);
    }

    // Write Methods

    /**
     * @param message
     */
    public static void write(String message) {
        info(message);
    }

    /**
     * Write the data out to System.out and to Reporter.log. This method was
     * added to be consistent with the logging interface in general. <br>
     * <br>
     * <em>Note that if {@link #quiteMode} is true, nothing is written. </em>
     *
     * @param message
     */
    public static void info(String message) {
        if (!quiteMode) {
            String date = getDateString();
            System.out.printf("%s %s\n", date, message);

            if (logForCucumber) {
                cucumberWritter(String.format("%s<b>%s</b> %s%s", normalFontBegin, date, sanitize(message), fontEnd));
            } else {
                TestListener.log(String.format("%s<b>%s</b> %s%s", normalFontBegin, date, sanitize(message), fontEnd));
            }
        }
    }

    // Helper Methods

    public static void handleWarningErrorFail(String message, Throwable throwable, TakeScreenshot takeScreenshot,
            String logLevelToken) {

        if (takeScreenshot == TakeScreenshot.True) {
            // take screenshot
            // screenshot()
        }

        String date = getDateString();

        String fontBegin = ("WARNING".equals(logLevelToken) ? warningFontBegin : errorFontBegin);

        if (message != null) {
            System.err.printf("%s %s: %s\n", date, logLevelToken, message);

            if (logForCucumber) {
                cucumberWritter(String.format("%s<b>%s</b> %s: %s%s", fontBegin, date, logLevelToken, sanitize(message),
                        fontEnd));
            } else {
                TestListener.log(String.format("%s<b>%s</b> %s: %s%s", fontBegin, date, logLevelToken,
                        sanitize(message), fontEnd));
            }
        }

        if (throwable != null) {
            String stackTrace = getStackTraceAsString(throwable);
            System.err.printf("%s %s: %s\n", date, logLevelToken, stackTrace);

            if (logForCucumber) {
                cucumberWritter(String.format("%s<b>%s</b> %s: %s%s", fontBegin, date, logLevelToken, sanitize(message),
                        fontEnd));
            } else {
                TestListener.log(String.format("%s<b>%s</b> %s: %s%s", fontBegin, date, logLevelToken,
                        sanitize(message), fontEnd));
            }
        }
        return;

    }

    /**
     *
     * Implement this later on......
     *
     * @param message
     * @param throwable
     * @param takeScreenshot
     * @param deviceType
     * @param logLevelToken
     */
    public static void handleWarningErrorFail(String message, Throwable throwable, TakeScreenshot takeScreenshot,
            String deviceType, String logLevelToken) {

    }

    /**
     * @return return the current date/time string formatted as:
     *         <strong>[yyyy-MM-dd HH:mm:ss z]</strong>
     */
    public static String getDateString() {
        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss z");
        return String.format("[%s]", dateFormat.format(new Date()));
    }

    /**
     * return a string containing the stack trace for the provided
     * {@link Throwable}. if {@link throwable} is null, return the empty string.
     *
     * @param throwable
     *            {@link Throwable} exception for log
     * @return return a string containing the stack trace for the provided
     *         {@link Throwable}
     */
    public static String getStackTraceAsString(Throwable throwable) {
        StringWriter stringWritter = new StringWriter();
        if (throwable != null) {
            throwable.printStackTrace(new PrintWriter(stringWritter));
        }

        return stringWritter.toString();
    }

    /**
     * Sanitize.
     *
     * @param message
     *            the message
     * @return the string
     */
    private static String sanitize(String message) {
        if (message == null) {
            return "";
        }

        return cleanInvalidCharacters(message.replaceAll("<", "&#60").replaceAll(">", "&#62").replace("\n", "<br>")
                .replaceAll(" ", "&nbsp;").replaceAll("\t", "&nbsp;&nbsp;&nbsp;"));
    }

    private static String cleanInvalidCharacters(String in) {
        StringBuilder out = new StringBuilder();
        char current;
        if ((in == null) || ("".equals(in))) {
            return "";
        }
        for (int i = 0; i < in.length(); i++) {
            current = in.charAt(i);
            if ((current == 0x9) || (current == 0xA) || (current == 0xD) || ((current >= 0x20) && (current <= 0xD7FF))
                    || ((current >= 0xE000) && (current <= 0xFFFD))
                    || ((current >= 0x10000) && (current <= 0x10FFFF))) {
                out.append(current);
            }

        }
        return out.toString().replaceAll("\\s", " ");
    }

    /**
     *
     * @param scenario
     *            The Cucumber {@link Scenario} to log against. When set,
     *            Cucumber logging is enabled.
     */
    /*
     * public static void setScenarioForCucumber (Scenario scenario) { if
     * (scenario == null) { logForCucumber = false; scenarioForCucumber = null;
     * } else { logForCucumber = true; scenarioForCucumber = scenario; if
     * (!lastScenarioName.equals(scenario.getName())) { // log scenario
     * lastScenarioName = scenario.getName(); JLog.section(scenario.getName());
     * }
     *
     * } }
     */

    /**
     * @return Return true if this is selenium test run. Note, this is set with
     *         {@link #setScenarioForCucumber(Scenario)}.
     */
    public static boolean isSelenium() {
        return logForCucumber;
    }

    /**
     * Implement this is cucumber project
     *
     * @param scenario
     *            the cucumber {@link Scenario} to log against. When set,
     *            Cucumber logging is enabled.
     */
    // public static void setScenarioForCucumber(Scenario scenario) {}

    public static void cucumberWritter(String message) {
        if (message.contains("Trespuentes")) {
            write("Debug");
        }

        try {
            // import string util from org.apache.commons.lang3.StringUtils
            // scenarioForCucumber.log(StringUtils.stripeAccents(message).replaceAll("\\P{Print}",
            // "") + "<br>");
        } catch (Exception e) {
            // TODO: handle exception
        }
    }

    /**
     * @param beQuite
     *            Set true to disable general logging. Reset to false to resume
     *            logging.
     */
    public static void setQuiteMode(boolean beQuite) {
        quiteMode = beQuite;
    }

}
